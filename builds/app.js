const cowbellFile="https://freesound.org/data/previews/34/34272_304419-lq.mp3",kickFile="https://freesound.org/data/previews/132/132584_2409787-lq.mp3",snareFile="https://freesound.org/data/previews/13/13750_32468-lq.mp3",hihatFile="https://freesound.org/data/previews/140/140514_177850-lq.mp3",crashFile="https://freesound.org/data/previews/13/13244_36719-lq.mp3";let context=new(window.AudioContext||window.webkitAudioContext),gainNode=context.createGain();gainNode.connect(context.destination),gainNode.gain.setValueAtTime(.8,context.currentTime);let metGain=context.createGain();metGain.connect(context.destination),metGain.gain.setValueAtTime(.8,context.currentTime);let nextRepeatPoint,animationRequest,instruments=new Map([["cowbell"],["kick"],["snare"]]),scheduledPlays=[],playBtn=document.querySelector("#play"),stopBtn=document.querySelector("#stop"),bpmInput=document.querySelector(".bpm_input"),metInput=document.querySelector(".metronome"),patternList=document.querySelector(".drum-machine_patterns"),displayMeasure=document.querySelector(".measure_measure"),displayBeat=document.querySelector(".measure_beat"),bpm=1,sixteenth=.25,metronomeOn=!0,playing=!1,beatsLeft=0,measure=void 0,animationFrame=null,displayedPattern=1,patterns=[newPattern()];async function getBuffer(e,t){const a=await fetch(e),n=await a.arrayBuffer(),r=await context.decodeAudioData(n).then(function(e){return e});instruments.set(t,r)}function newPattern(){return new Map([[0,["cowbell"]],[1,[]],[2,[]],[3,[]],[4,["cowbell"]],[5,[]],[6,[]],[7,[]],[8,["cowbell"]],[9,[]],[10,[]],[11,[]],[12,["cowbell"]],[13,[]],[14,[]],[15,[]]])}function setup(e){let t=context.createBufferSource();return t.buffer=instruments.get(e),t.connect("cowbell"===e?metGain:gainNode),"cowbell"===e&&(beatsLeft+=1,t.onended=function(e){beatsLeft-=1,!0===playing&&3===beatsLeft&&playBeat()}),scheduledPlays.push(t),t}function playSample(e,t){setup(t).start(e)}function playBeat(){const e=void 0===nextRepeatPoint?context.currentTime:nextRepeatPoint;patterns.forEach((t,a)=>{t.forEach((t,n)=>{0!==t.length&&t.forEach(t=>{playSample(e+sixteenth*n+4*bpm*a,t)})})}),nextRepeatPoint=e+4*bpm*patterns.length}function showMeasure(e){animationFrame||(animationFrame=e);let t=e-animationFrame;void 0===measure&&(measure=1,document.querySelector(".bars_measure"+measure).classList.toggle("bars_measure-selected"),displayBeat.innerHTML=measure,measure++),t>1e3*bpm&&(resetMeasure(),document.querySelector(".bars_measure"+measure).classList.toggle("bars_measure-selected"),displayBeat.innerHTML=measure,animationFrame+=1e3*bpm,4===measure?measure=1:(1===measure&&(patterns.length>displayedPattern?switchPattern(Number(displayedPattern)+1):switchPattern(1)),measure++)),animationRequest=window.requestAnimationFrame(showMeasure)}function resetMeasure(){document.querySelector(".bars_measure1").classList.toggle("bars_measure-selected",!1),document.querySelector(".bars_measure2").classList.toggle("bars_measure-selected",!1),document.querySelector(".bars_measure3").classList.toggle("bars_measure-selected",!1),document.querySelector(".bars_measure4").classList.toggle("bars_measure-selected",!1),playing||(measure=void 0)}function stop(){var e=context.currentTime+.1;gainNode.gain.exponentialRampToValueAtTime(.01,e),scheduledPlays.forEach(e=>e.stop()),playing=!1,nextRepeatPoint=void 0,gainNode.gain.setValueAtTime(.8,e),window.cancelAnimationFrame(animationRequest),animationFrame=null,resetMeasure(),bpmInput.disabled=!1}function toggleMet(e){var t=context.currentTime+.05;e.target.checked?metGain.gain.exponentialRampToValueAtTime(.8,t):metGain.gain.exponentialRampToValueAtTime(.001,t)}function switchPattern(e){console.log(e),e!=displayedPattern&&(document.querySelector(".drum-machine_pattern"+displayedPattern).classList.toggle("drum-machine_pattern-selected"),document.querySelector(".drum-machine_pattern"+e).classList.toggle("drum-machine_pattern-selected"),displayMeasure.innerHTML=e,document.querySelectorAll(".note-play").forEach(e=>e.classList.toggle("note-play")),displayedPattern=e,patterns[e-1]&&patterns[e-1].forEach((e,t)=>{e.forEach(e=>{"cowbell"!==e&&document.querySelector("."+e+"_"+t).classList.toggle("note-play")})}))}getBuffer(cowbellFile,"cowbell"),getBuffer(kickFile,"kick"),getBuffer(snareFile,"snare"),getBuffer(hihatFile,"hihat"),getBuffer(crashFile,"crash"),playBtn.addEventListener("mousedown",function(){playing||(playBeat(),switchPattern(1),window.requestAnimationFrame(showMeasure),playing=!0,bpmInput.disabled=!0)}),stopBtn.addEventListener("click",function(){stop()}),bpmInput.addEventListener("change",function(e){bpm=60/e.target.value,sixteenth=bpm/4,console.log(bpm)}),metInput.addEventListener("change",function(e){toggleMet(e)}),document.querySelector(".drum-machine").addEventListener("click",e=>{if(e.target.classList.contains("note")&&!playing){const t=e.target.parentNode.getAttribute("data-instrument"),a=Number(e.target.getAttribute("data-partial"));patterns[displayedPattern-1]||(patterns[displayedPattern-1]=newPattern());let n=patterns[displayedPattern-1].get(a);n.includes(t)?patterns[displayedPattern-1].set(a,n.filter(e=>e!==t)):(n.push(t),patterns[displayedPattern-1].set(a,n)),playSample(context.currentTime,t),e.target.classList.toggle("note-play")}}),patternList.addEventListener("click",e=>{e.target.classList.contains("drum-machine_pattern")&&!playing&&switchPattern(e.target.getAttribute("data-pattern"))});